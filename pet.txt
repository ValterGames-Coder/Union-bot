@bot.message_handler(commands=['walk'])
def walk(message):
    pet = database.get_pet(message.from_user.id)
    response = requests.get("https://g.tenor.com/v1/search?q={0}&key=LIVDSRZULELA&limit=30".format(f'walk with {pet[5]}'))
    data = response.json()
    gif = random.choice(data["results"])
    if pet is None:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–∏—Ä—É—á–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /tamepet')
    else:
        bot.send_animation(message.chat.id, gif['media'][0]['gif']['url'], caption=database.walk_pet(message.from_user.id))


@bot.message_handler(commands=['eat'])
def eat(message):
    pet = database.get_pet(message.from_user.id)
    response = requests.get("https://g.tenor.com/v1/search?q={0}&key=LIVDSRZULELA&limit=30".format(f'{pet[5]} eat'))
    data = response.json()
    gif = random.choice(data["results"])
    if pet is None:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–∏—Ä—É—á–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /tamepet')
    else:
        bot.send_animation(message.chat.id, gif['media'][0]['gif']['url'], caption=database.eat_pet(message.from_user.id))



@bot.message_handler(commands=['tamepet'])
def tame_pet(message):
    pets = database.get_pets()
    pets_id = []
    for pet in pets:
        pets_id.append(pet[0])
    if message.from_user.id in pets_id:
        bot.reply_to(message, '–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü')
    elif len(message.text.split(' ')) == 2:
        bot.reply_to(message, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)')
    elif len(message.text.split(' ')) == 3:
        name = message.text.split(' ')[1]
        type = message.text.split(' ')[2]
        bot.reply_to(message, database.create_pet(message.from_user.id, name, type))
    else:
        bot.reply_to(message,'–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞')


@bot.message_handler(commands=['pet'])
def pet(message):
    pet = database.get_pet(message.from_user.id)
    print(pet)
    if pet is None:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–∏—Ä—É—á–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /tamepet')
    else:
        text = f'<a href="tg://user?id={pet[0]}">–ü–∏—Ç–æ–º–µ—Ü {pet[1]}</a>\n'
        text += f'üö∂ –ü—Ä–æ–≥—É–ª–∫–∏: \n<b>{bar(pet[2])}</b>\n'
        text += f'üòÄ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: \n<b>{bar(pet[3])}</b>\n'
        text += f'üåØ –ï–¥–∞: \n<b>{bar(pet[4])}</b>\n'
        print()
        bot.send_message(message.chat.id, text, parse_mode='HTML')


def bar(count: int):
    text = ''
    for i in range(10):
        if i < count:
            text += '‚ñ†'
        else:
            text += '‚ñ°'
    return text